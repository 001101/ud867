/*
    Copying files in Gradle is simple. We start by simply declaring a new task 
    and specify the type as "Copy", like so.
*/

task copyTask(type: Copy)

/*
    Of course, this task won't actually do anything because we haven't told it 
    want file we would like copied and to where. The simplest example is 
    simply to copy the contents of one folder into another. We use the Copy 
    task's "from" method to add sources and the "into" method to specify the 
    destination. The result of the following copy task will imply be to copy 
    the contents of the "images" directory into a directory named "build".
*/

task copyImages(type: Copy) {
    from 'images'
    into 'build'
}

/*
    The Copy task also supports more advanced configuration like filtering. We 
    can explicitly tell Gradle files to include to exclude. Our filters can use 
    wildcards, allowing us to things like include all files that match a 
    certain pattern or have a particular file extension. Let configure our task 
    to only include JPEG images by calling the "include" method and passing a 
    file pattern.
*/

task copyJpegs(type: Copy) {
    from 'images'
    include '*.jpg'
    into 'build'
}

/*
    We can additionally configure a single Copy task to perform more than one 
    copy operation. We accomplish this by configuring multiple CopySpecs, which 
    is the interface Gradle uses to describe a copy operation. CopySpecs can 
    also be hierarchical, which is particularly useful when we want to include 
    certain files in a subfolder or exclude files from another. To show how 
    this works, let's configure a Copy task which copies all the JPEG files 
    into  one folder and GIFs into another. Here we define two child CopySpecs. 
    The syntax for this simply to supply a configuration closure to the Copy 
    task method. The closure configures our newly created CopySpec. In this     
    case we configure one CopySpec to include only JPEG files and the other 
    only to include GIFs. We also specify the folder we want to copy these 
    files to. These folders will be created as subfolders under the root copy 
    destination which we specify as a folder called "build". The end result 
    being that all files with a .jpg extension will be copyied to a folder 
    "build/jpeg" and all .gif files will be copied to the "build/gif" folder.
*/

task copyImageFolders(type: Copy) {
    from('images') {
        include '*.jpg'
        into 'jpeg'
    }
    
    from('images') {
        include '*.gif'
        into 'gif'
    }
    
    into 'build'
}

/*
    Gradle also provides task types for creating archives like Zip or Tar 
    files. Archive tasks have a nearly identical API to Copy tasks. The main 
    difference is that instead of copying the files to a target directory, 
    files are bundled into an archive file. Using our simple Copy task example, 
    let's create a Zip file that includes all the files in our "images" 
    directory. We use the Zip tasks "baseName" and "destinationDir"  properties 
    to tell Gradle what to name the file and where to create it, respectively. 
    Note that the "destinationDir" property takes a Java File object. Luckily 
    the Gradle Project interface provides a convenience method for us for 
    creating files. The final result of this task is to create a file named 
    "images.zip" in the "build" directory which includes all files in the 
    "images" directory.
*/

task zipImages(type: Zip) {
    baseName = 'images'
    destinationDir = file('build')
    from 'images'
}

/*
    Since archive tasks use the same API as Copy tasks we can do similar things 
    with child CopySpecs. Bulding off our previous example, we can create an 
    archive which puts JPEG and GIF files in their own directories inside the 
    archive. You'll notice the only difference from our Copy task example is 
    that we specify the archive name and destination.
*/

task zipImageFolders(type: Zip) {
    baseName = 'images'
    destinationDir = file('build')
    
    from('images') {
        include '*.jpg'
        into 'jpeg'
    }
    
    from('images') {
        include '*.gif'
        into 'gif'
    }
}

/*
    It is also sometimes necessary to delete files as part of our build. Most 
    commonly we do this to remove all build outputs. We can use the Delete task 
    to delete files or  folders in our project. Let's simply create a task that 
    deletes the "build" folder. In this case, the Delete task provides a method 
    called "delete" which we use to specify the items we want deleted.
*/

task deleteBuild(type: Delete) {
    delete 'build'
}