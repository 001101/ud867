/*
 * Welcome to our Groovy playground! You don't need to know a ton of Groovy to
 * work with Gradle, but it helps to know the basics. We'll explore some useful 
 * features, and we'll look at the docs to see where we can go for more
 * information.
 *
 * Groovy was chosen for the language of Gradle build scripts because it allows
 * for tremendous flexibility inside a compact domain specific language, all in
 * a context that will be familiar to Java developers.
 *
 * Since all Gradle build scripts are Groovy, instead of installing Groovy, 
 * we'll just put our Groovy in the actions of tasks!
 */

/*
 * Let's check out two super convinient Groovy features: dynamic typing,
 * and string interpolation. Dynamic typing means that type checking happens
 * at run time, which means you don't need to declare the types of variables.
 * String interpolation is a feature that allows us to build up strings very
 * conviently.
 *
 * Just run the stringsAndTypes task to get started!
 */

task stringsAndTypes << {


    println "Let's do some math. 5 + 6 = ${5 + 6}"

    // We declare a variable like so:
    def foo = 6.5

    // We can use the class property to 
    println "foo is of type: ${foo.class} and has value: $foo"
    foo = "a string"
    println "foo is now of type: ${foo.class} and has value: $foo"

    // TODO: Use string interpolation to print the square root of 127
    // HINT: http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html
    println "The square root of 127 is ${Math.sqrt(127)}"

    // TODO: Assign the current date to foo and print it, along with its type
    // HINT: http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html
    foo = new java.util.Date()
    println "foo is now of type: ${foo.class} and has value: $foo"
}


/*
 * Groovy syntax is based on Java, but you may have noticed a distinct lack of
 * parentheses and semi-colons. The latter are always optional
 */

task syntax << {

    def hello = "Hello, Jeremy.";
    def name = hello.substring(7, 13);
    
    println name.toUpperCase();
}

task functionsAndClosures << {
    //Functions are declared with Java-like syntax
    def fac(n) { n == 0 ? 1 : n * fac(n - 1) }
    assert 24 == fac(4)
//    println double(5)

    print "functions"
}

task lists << {
    print "lists"
}

task classes << {



}

task branchingAndLooping << {
    "branching"

}



