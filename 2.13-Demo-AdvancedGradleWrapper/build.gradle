/*
    We talked about the Gradle wrapper briefly at the beginning of the first
    lesson. The Gradle wrapper is comprised of a pair of scripts, a shell script
    for Unix and Mac operating systems, and a batch script for Windows. These 
    execute your build via a wrapper that will automatically download Gradle if
    it hasn't done so already. Essentially, the wrapper allows developers to
    use Gradle to build your project without have to actually download and 
    install Gradle itself.

    The Gradle wrapper can be initialized by running the 'wrapper' task. The
    'wrapper' task is available on every Gradle project. This task will set up
    the wrapper by generating the wrapper scripts as well as adding the wrapper
    jar and properties files to your project. The wrapper scripts are placed in
    the root of your project directory and the other files in the 
    'gradle/wrapper' directory.

    We can now run our Gradle build by using the wrapper scripts. We use the 
    scripts identically to how we would the 'gradle' command. 

        $ ./gradlew tasks

    If this is the first time using the wrapper, it will go ahead and download
    the appropariate Gradle distribution and cache it locally. We can also
    explicitly configure what version of Gradle we would like to use by setting
    the `gradleVersion` property on the 'wrapper' task. Let's the version to 
    '2.2' and run the 'wrapper' task again. 
 */

wrapper {
    gradleVersion = '2.2'
}

/*
    Again, if we haven't already downloaded this particular version of Gradle, 
    the wrapper will do so for us. Let's run the wrapper with the '--version'
    option to confirm we are using the correct version.

        $ ./gradlew --version

    As you can see, the wrapper is now using version 2.2 of Gradle. This 
    information is saved in the gradle-wrapper.properties file in the 
    'gradle/wrapper' directory. We can alternatively set the wrapper version by
    modifying this file. Let's set the version back to 2.3 by changing the
    value of of the `distributionUrl` property.

    Again, let's run the wrapper with the '--version' option and verify the
    result.

        $ ./gradlew --version

    The version is now 2.3. This is a really important feature, as it allows us
    to centrally control what version of Gradle is used to build our project.
    In practice, the Gradle wrapper files, to include the scripts, jar and 
    properties file, will be committed to source control. This serves two main 
    functions. First, it means that everything that is needed to get up and 
    running with developoment of our project is included in the source  
    repository. Second, it means that the Gradle version is also version 
    controlled, which eliminates the possibility that a developer encounters
    problems with the build due to using the wrong version of Gradle.
 */